#ifndef MINIMAX_H
#define MINIMAX_H
// Include section _______________________________
#include "../../common/c/rules/check_and_pat.h"
#include "../../common/c/rules/pieces.h"
#include "../../common/c/rules/plate.h"


// Define section _______________________________
#define pawn_table {0, 0, 0, 0, 0, 0, 0, 0, \
                    5, 5, 5, 5, 5, 5, 5, 5, \
                    1, 1, 2, 3, 3, 2, 1, 1, \
                    0.5, 0.5, 1, 2.5, 2.5, 1, 0.5, 0.5, \
                    0, 0, 0, 2, 2, 0, 0, 0, \
                    0.5, -0.5, -1, 0, 0, -1, -0.5, 0.5, \
                    0.5, 1, 1, -2, -2, 1, 1, 0.5, \
                    0, 0, 0, 0, 0, 0, 0, 0}

#define rook_table {0, 0, 0, 0, 0, 0, 0, 0, \
                    0.5, 1, 1, 1, 1, 1, 1, 0.5, \
                    -0.5, 0, 0, 0, 0, 0, 0, -0.5, \
                    -0.5, 0, 0, 0, 0, 0, 0, -0.5, \
                    -0.5, 0, 0, 0, 0, 0, 0, -0.5, \
                    -0.5, 0, 0, 0, 0, 0, 0, -0.5, \
                    -0.5, 0, 0, 0, 0, 0, 0, -0.5, \
                    0, 0, 0, 0.5, 0.5, 0, 0, 0}

#define bishop_table {-2, -1, -1, -1, -1, -1, -1, -2, \
                      -1, 0, 0, 0, 0, 0, 0, -1, \
                      -1, 0, 0.5, 1, 1, 0.5, 0, -1, \
                      -1, 0.5, 0.5, 1, 1, 0.5, 0.5, -1, \
                      -1, 0, 1, 1, 1, 1, 0, -1, \
                      -1, 1, 1, 1, 1, 1, 1, -1, \
                      -1, 0.5, 0, 0, 0, 0, 0.5, -1, \
                      -2, -1, -1, -1, -1, -1, -1, -2}

#define knight_table { -5, -4, -3, -3, -3, -3, -4, -5  \
                      -4, -2, 0, 0, 0, 0, -2, -4, \
                      -3, 0, 1, 1.5, 1.5, 1, 0, -3, \
                      -3, 0.5, 1.5, 2, 2, 1.5, 0.5, -3, \
                      -3, 0, 1.5, 2, 2, 1.5, 0, -3, \
                      -4, -2, 0, 0.5, 0.5, 0, -2, -4, \
                      -5, -4, -3, -3, -3, -3, -4, -5 }

#define queen_table { -2, -1, -1, -0.5, -0.5, -1, -1, -2, \
                     -1, 0, 0, 0, 0, 0, 0, -1, \
                     -1, 0, 0.5, 0.5, 0.5, 0.5, 0, -1, \
                     -0.5, 0, 0.5, 0.5, 0.5, 0.5, 0, -0.5, \
                     0, 0, 0.5, 0.5, 0.5, 0.5, 0, -0.5, \
                     -1, 0.5, 0.5, 0.5, 0.5, 0.5, 0, -1, \
                     -1, 0, 0.5, 0, 0, 0, 0, -1, \
                     -2, -1, -1, -0.5, -0.5, -1, -1, -2 }

#define king_table { -3, -4, -4, -5, -5, -4, -4, -3, \
                    -3, -4, -4, -5, -5, -4, -4, -3, \
                    -3, -4, -4, -5, -5, -4, -4, -3, \
                    -3, -4, -4, -5, -5, -4, -4, -3, \
                    -2, -3, -3, -4, -4, -3, -3, -2, \
                    -1, -2, -2, -2, -2, -2, -2, -1, \
                    2, 2, 0, 0, 0, 0, 2, 2, \
                    2, 3, 1, 0, 0, 1, 3, 2 }
// Structure function ____________________________
struct node {
  int isMaxPlayer; //Used for Alpha-Beta?
  int x;
  int y;
  int score;
  struct node *children;
};

struct tree{
  struct node root;
}


// Function section _______________________________
// Position evaluation function
int getVal(struct Piece current);


#endif
